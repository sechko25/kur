#include<bits/stdc++.h> 
using namespace std; 

int FIFO(int pages[], int n, int capacity) 
{ 
    unordered_set<int> s; // ????? ??????? ???????
 
    queue<int> indexes; // ??? ???????? ??????? ? ?????? FIFO
   
    int page_faults = 0; 
    for (int i=0; i<n; i++) 
    {  
        if (s.size() < capacity) // ????? ?? ????? ????????? ?????? ???
        { 
            if (s.find(pages[i])==s.end())
            { 
                s.insert(pages[i]); // ???????? ??? ? ????? 
                page_faults++; // ?????? ???-?? ??????
                indexes.push(pages[i]); // ??? ? ???????
            } 
        } 

        else // ???? ????? ????????, ????????? FIFO
        {  
            if (s.find(pages[i]) == s.end()) // ??? ?? ???????? ? ??????
            { 
                int val = indexes.front(); 
                indexes.pop(); // ?????? ??? ?? ???????
                s.erase(val); // ??????? ??? ?? ?????? 
                s.insert(pages[i]); // ?????? ??????? ??? ? ?????
                indexes.push(pages[i]); // ??????? ??????? ??? ? ???????
                page_faults++; // ?????? ???-?? ??????
            } 
        } 
    } 
  
    return page_faults; 
}


int LRU(int pages[], int n, int capacity) 
{ 
	unordered_set<int> s; // ????? ??????? ???????

	unordered_map<int, int> indexes; // ??? ???????? ??????? ? ?????? FIFO

	int page_faults = 0; 
	for (int i=0; i<n; i++) 
	{ 
		if (s.size() < capacity) // ????? ?? ????? ????????? ?????? ???
		{ 
			if (s.find(pages[i])==s.end()) 
			{ 
				s.insert(pages[i]); // ???????? ??? ? ????? 
				page_faults++; // ?????? ???-?? ??????
			} 

			indexes[pages[i]] = i; // ???????? ??????? ?????????????? ??????
		} 

		else // ???? ????? ????????, ????????? LRU
		{ 
			if (s.find(pages[i]) == s.end()) // ??? ?? ???????? ? ??????
			{  
				// ??????? ???????? ???????????? ??? ? ??????
				int lru = INT_MAX, val; 
				for (auto it=s.begin(); it!=s.end(); it++) 
				{ 
					if (indexes[*it] < lru) 
					{ 
						lru = indexes[*it]; 
						val = *it; 
					} 
				} 
 
				s.erase(val); // ??????? ??? ?? ??????
				s.insert(pages[i]); // ?????? ??????? ??? ? ?????
				page_faults++; // ?????? ???-?? ??????
			} 

			indexes[pages[i]] = i; // ??????? ?????? ??????? ???
		} 
	} 

	return page_faults; 
} 

int main() 
{ 
	int pages[] = {7, 0, 1, 2, 0, 3, 0, 4, 2, 3, 0, 3, 2, 1, 2, 0, 1, 7, 0, 1}; 
	int n = sizeof(pages)/sizeof(pages[0]); 
	int capacity = 3; 
  	cout << "FIFO = " << FIFO(pages, n, capacity);
	cout << "\nLRU = " << LRU(pages, n, capacity); 
	return 0; 
} 

